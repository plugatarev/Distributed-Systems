version: '3'
services:
  manager:
    build:
      context: .
      dockerfile: manager/Dockerfile
    ports:
      - '8080:8080'
    depends_on:
      rabbitmq3:
        condition: service_healthy
      mongodb-primary:
        condition: service_healthy
    environment:
      - PORT=8080
      - WORKERS_NUMBER=5
    networks:
      - network

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    ports:
      - '8081-8085:8081'
    depends_on:
      rabbitmq3:
        condition: service_healthy
    environment:
      - PORT=8081
    deploy:
      mode: replicated
      replicas: 5
    networks:
      - network

  mongodb-primary:
    image: mongo:latest
    restart: always
    container_name: mongodb-primary
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongodb-primary:27017',priority:1},{_id:1,host:'mongodb-secondary1:27017',priority:0.5},{_id:2,host:'mongodb-secondary2:27017',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 20s
      retries: 20
    volumes:
      - mongodata-primary-data:/data/db
      - mongodata-primary-config:/data/configdb
    ports:
      - "27017:27017"
    networks:
      - network

  mongodb-secondary1:
    image: mongo:latest
    restart: always
    container_name: mongodb-secondary1
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    volumes:
      - mongodata-secondary1-data:/data/db
      - mongodata-secondary1-config:/data/configdb
    ports:
      - "27018:27017"
    networks:
      - network

  mongodb-secondary2:
    image: mongo:latest
    restart: always
    container_name: mongodb-secondary2
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    volumes:
      - mongodata-secondary2-data:/data/db
      - mongodata-secondary2-config:/data/configdb
    ports:
      - "27019:27017"
    networks:
      - network

  rabbitmq3:
    container_name: "rabbitmq"
    image: rabbitmq:3-management
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      # AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 3s
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    networks:
      - network

volumes:
  mongodata-primary-data:
  mongodata-primary-config:
  mongodata-secondary1-data:
  mongodata-secondary1-config:
  mongodata-secondary2-data:
  mongodata-secondary2-config:
  rabbitmq:

networks:
  network:
    driver: bridge